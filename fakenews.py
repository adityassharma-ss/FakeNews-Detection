# -*- coding: utf-8 -*-
"""FakeNews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1khZCe6MOScrZj9t3ADV3r-cKfr_4VEnQ

Importing The Dependencies
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data-Preprocessing"""

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

news_dataset.head()

news_dataset.isnull().sum()

news_dataset = news_dataset.fillna('')

news_dataset['content'] =  news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

X=news_dataset.drop(columns='label',axis=1)
Y=news_dataset['label']

print(X)
print(Y)

"""Stemming: Process of reducing a word to its root word"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[Ë„a-zA-z]',' ', content)
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] =  news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# Separating the data and Label

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Spltiing the data to training & set data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify = Y, random_state=2)

"""Training the Model : Logistic regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation

Accuracy Score
"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data is: ' , training_data_accuracy)

#On test Data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score for the test data: ', test_data_accuracy)

"""Make a Predictive System"""

X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print('The news is Real')
else:
  print('Its a Fake news')

# You can fill indexing in test[ ] and check if the news is real or fake

print(Y_test[3])